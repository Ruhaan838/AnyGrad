name: Build & Publish anygrad to PyPI
on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Upgrade pip and install build
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
      - name: Build distributions (wheel and sdist) on Windows
        run: python -m build --sdist --wheel
      - name: Verify generated distributions (Windows)
        run: dir dist
      - name: Upload Windows Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/*

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Upgrade pip and install build
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
      - name: Build distributions (wheel) on macOS
        run: python -m build --wheel
      - name: Verify generated distributions (macOS)
        run: ls -lh dist/
      - name: Upload macOS Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/*

  publish:
    name: Combine and Publish Distributions to PyPI
    runs-on: macos-latest
    needs: [build-windows, build-macos]
    steps:
      - name: Download Windows Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-dist
          path: artifacts/windows
      - name: Download macOS Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-dist
          path: artifacts/macos
      - name: Combine Artifacts
        run: |
          mkdir -p dist
          cp -n artifacts/windows/* dist/ || true
          cp -n artifacts/macos/* dist/ || true
          ls -lh dist/
      - name: Install Twine
        run: python -m pip install --upgrade pip twine
      - name: Publish to PyPI
        shell: bash
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/* --username __token__ --password "$PYPI_API_TOKEN"
